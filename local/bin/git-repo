#!/bin/bash

COLOR_GREEN="\033[01;32m"
COLOR_RED="\033[01;31m"
COLOR_NORMAL="\033[00;m"

LINE=". . . . . . . . . . . . . . . "

function git_current_branch() {
  git branch | grep '*' | tr -d '*'
}

function git_all_branches() {
  git branch | grep -vF "$(echo -e "string_must_not_be_empty\n$(git branch --contains m/master)")" | tr -d '*'
}

function git_temporary_branch() {
  echo -n tmpbranch_
  tr -dc "[:alpha:]" < /dev/urandom | head -c 8
}

function quiet() {
  $@ > /dev/null
}

function silent() {
  $@ > /dev/null 2>&1
}

case $1 in
  uploadthis)
    shift
    source /etc/bash_completion.d/git-prompt
    repo upload . --br=$(__git_ps1 "%s") $@
    ;;

  rebaseall)
    current_branch=$(git_current_branch)
    for branch in $(git_all_branches); do
      silent git checkout $branch
      if silent git rebase m/master; then
        printf "%s%s%b\n" "$branch" "${LINE:${#branch}}" "${COLOR_GREEN}[ SUCCESS ]${COLOR_NORMAL}"
      else
        silent git rebase --abort
        printf "%s%s%b\n" "$branch" "${LINE:${#branch}}" "${COLOR_RED}[ FAILED  ]${COLOR_NORMAL}"
      fi
    done
    git checkout $current_branch
    ;;

  reap)
    for branch in $(git branch --merged m/master | sed "/*/d"); do
      git branch -d $branch
    done
    ;;

  uploadcommit)
    current_branch=$(git_current_branch)
    upload_branch=$(git_temporary_branch)
    silent git checkout -t m/master -b $upload_branch
    quiet git cherry-pick --ff $2
    shift
    shift
    git repo upload --br=$upload_branch $@
    silent git checkout $current_branch
    silent git branch -D $upload_branch
    ;;

  help)
    echo usage: git repo COMMAND
    echo
    echo uploadthis -- upload the current branch
    echo uploadcommit -- uploads the specified commit hash by itself
    echo rebaseall -- rebase all branches onto m/master
    echo reap -- delete all branches that are fully merged
    echo
    repo help
    ;;

  *) repo $@;;
esac
